<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mako info on</title><link>https://ramellose.github.io/mako_docs/manual/</link><description>Recent content in Mako info on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ramellose.github.io/mako_docs/manual/index.xml" rel="self" type="application/rss+xml"/><item><title>API Overview</title><link>https://ramellose.github.io/mako_docs/manual/api/overview/</link><pubDate>Tue, 20 Apr 2021 11:36:28 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/overview/</guid><description>The API follows an identical structure to the CLI, which has been separated in several modules for ease of use. Importing a class or function from mako therefore can be done as follows:
from mako.scripts.utils import ParentDriver
from mako.scripts.base import BaseDriver
from mako.scripts.neo4biom import Biom2Neo
from mako.scripts.io import IoDriver
from mako.scripts.netstats import NetstatsDriver
from mako.scripts.metastats import MetastatsDriver
from mako.scripts.utils import ParentDriver
For learning more about the parameters used by a driver, type help(driver), replacing driver with the name of the driver you are interested in.</description></item><item><title>Introduction</title><link>https://ramellose.github.io/mako_docs/manual/introduction/intro/</link><pubDate>Tue, 20 Apr 2021 11:32:16 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/introduction/intro/</guid><description>The database schema used by mako defines a set structure for uploading microbiome-related files to a Neo4j database. The software tool is based around this data schema and provides an application programming interface (API), command line interface (CLI) and graphical user interface (GUI) for converting files to the database, or for extracting relevant files and exporting these as a text file or to Cytoscape.
In this manual, we will briefly discuss mako&amp;rsquo;s CLI, GUI and API.</description></item><item><title>CLI Overview</title><link>https://ramellose.github.io/mako_docs/manual/cli/overview/</link><pubDate>Tue, 20 Apr 2021 11:52:09 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/overview/</guid><description>The CLI has been separated in several modules for ease of use. Selecting a module is done by including the module name in the script call, like so:
mako base
mako neo4biom
mako io
mako netstats
mako metastats
mako manta
mako anuran
For learning more about the parameters used by each module, type mako module -h in your terminal, replacing module with the name of the module you are interested in.</description></item><item><title>Using a driver class</title><link>https://ramellose.github.io/mako_docs/manual/api/drivers/</link><pubDate>Tue, 20 Apr 2021 11:36:34 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/drivers/</guid><description>While mako&amp;rsquo;s functions can be called from command line, they have also been documented extensively so they can be used from a Python script. The base, neo4biom, io, netstats, metastats and utils modules each contain a class that can interact with a running Neo4j database instance. To carry out the functions as part of a script, simply instantiate an object with the necessary information to connect to the database and it will set up a Neo4j driver that can be used to run mako-specific functions or to run custom queries.</description></item><item><title>ParentDriver</title><link>https://ramellose.github.io/mako_docs/manual/api/parentdriver/</link><pubDate>Wed, 28 Apr 2021 16:34:14 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/parentdriver/</guid><description>The ParentDriver class provides some general class methods available to all other mako drivers.
ParentDriver.close()
Closes the connection to the database.
ParentDriver.query(query, batch=None)
ParentDriver.write(query, batch=None)
Accepts a query (read or write) and provides the results. For batch queries, the batch parameter should contain a list of dictionaries, where each dictionary contains a key: value pair where the key matches a key in the Cypher query.
Batch queries should unwind the batch, like so:</description></item><item><title>mako base</title><link>https://ramellose.github.io/mako_docs/manual/cli/base/</link><pubDate>Tue, 20 Apr 2021 11:33:29 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/base/</guid><description>The base module can start a Neo4j Desktop if no Neo4j Desktop process has been started already, or safely shut down Neo4j Desktop if the process has been stored and the process ID is available in the config file. Additionally, the module can clear the database or check constraints.
If connecting to a Docker instance or other running instance of Neo4j, only the -clear and -check functions of the base module are relevant.</description></item><item><title>BaseDriver</title><link>https://ramellose.github.io/mako_docs/manual/api/basedriver/</link><pubDate>Wed, 28 Apr 2021 16:34:30 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/basedriver/</guid><description>The BaseDriver class clears the database and checks constraints.
BaseDriver.clear_database()
Clears the database, deleting all nodes and edges.
BaseDriver.check_domain_range()
This function uses the Neo4j driver and the ontology to check whether there are properties in the database that violate the domains and ranges specified in the ontology.
BaseDriver.add_constraints()
This function adds some constraints for unique node names specified in the data schema.</description></item><item><title>mako neo4biom</title><link>https://ramellose.github.io/mako_docs/manual/cli/neo4biom/</link><pubDate>Tue, 20 Apr 2021 11:33:36 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/neo4biom/</guid><description>The neo4biom module can be used to write BIOM files or tab-delimited files to a Neo4j database according to mako&amp;rsquo;s database schema. The -fp prefix contains the shared file path, so there is no need to write the full file path, partial file paths or just filenames are sufficient if -fp is used. If the -o flag is provided, BIOM files are uploaded without counts (so only taxonomy and metadata is uploaded).</description></item><item><title>Biom2Neo</title><link>https://ramellose.github.io/mako_docs/manual/api/biom2neo/</link><pubDate>Wed, 28 Apr 2021 16:34:53 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/biom2neo/</guid><description>This driver contains functions for writing BIOM files to the database, and also for writing BIOM files from the database to disk.
Biom2Neo.convert_biom(biomfile, exp_id, obs=True)
Stores a BIOM object in the database. To speed up this process, all data from the BIOM object is first converted to dictionaries or lists that can be used in parameterized batch queries. If obs is set to false, all taxa are only connected to a single &amp;ldquo;mock&amp;rdquo; sample.</description></item><item><title>mako io</title><link>https://ramellose.github.io/mako_docs/manual/cli/io/</link><pubDate>Tue, 20 Apr 2021 11:33:45 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/io/</guid><description>The io module can be used to write network files to a Neo4j database according to mako&amp;rsquo;s database schema. The -fp prefix contains the shared file path, so there is no need to write the full file path, partial file paths or just filenames are sufficient if -fp is used.
The io module also has options for adding extra metadata to the Neo4j database. If a tab-delimited edge list is supplied with existing nodes in the 1st column and new properties in the 2nd column, this is used to create a new Property node with relationships containing property values.</description></item></channel></rss>