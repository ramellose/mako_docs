<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mako info on</title><link>https://ramellose.github.io/mako_docs/manual/</link><description>Recent content in Mako info on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ramellose.github.io/mako_docs/manual/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://ramellose.github.io/mako_docs/manual/introduction/intro/</link><pubDate>Tue, 20 Apr 2021 11:32:16 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/introduction/intro/</guid><description>This manual describes how mako can be installed and how its interfaces work. Mako includes an application programming interface (API), command line interface (CLI) and graphical user interface (GUI) for converting files to the database, or for extracting relevant files and exporting these as a text file or to Cytoscape. Each of the commands of the CLI will be discussed in detail. For the API, we will address the structure of the drivers and key commands that can be used to run custom Python scripts.</description></item><item><title>CLI Overview</title><link>https://ramellose.github.io/mako_docs/manual/cli/overview/</link><pubDate>Tue, 20 Apr 2021 11:52:09 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/overview/</guid><description>The CLI has been separated in several modules for ease of use. Selecting a module is done by including the module name in the script call, like so:
mako base
mako neo4biom
mako io
mako netstats
mako metastats
mako manta
mako anuran
For learning more about the parameters used by each module, type mako module -h in your terminal, replacing module with the name of the module you are interested in.</description></item><item><title>mako base</title><link>https://ramellose.github.io/mako_docs/manual/cli/base/</link><pubDate>Tue, 20 Apr 2021 11:33:29 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/base/</guid><description>The base module can start a Neo4j Desktop if no Neo4j Desktop process has been started already, or safely shut down Neo4j Desktop if the process has been stored and the process ID is available in the config file. Additionally, the module can clear the database or check constraints.
If connecting to a Docker instance or other running instance of Neo4j, only the -clear and -check functions of the base module are relevant.</description></item><item><title>mako neo4biom</title><link>https://ramellose.github.io/mako_docs/manual/cli/neo4biom/</link><pubDate>Tue, 20 Apr 2021 11:33:36 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/neo4biom/</guid><description>The neo4biom module can be used to write BIOM files or tab-delimited files to a Neo4j database according to mako&amp;rsquo;s database schema. The -fp prefix contains the shared file path, so there is no need to write the full file path, partial file paths or just filenames are sufficient if -fp is used. If the -o flag is provided, BIOM files are uploaded without counts (so only taxonomy and metadata is uploaded).</description></item><item><title>mako io</title><link>https://ramellose.github.io/mako_docs/manual/cli/io/</link><pubDate>Tue, 20 Apr 2021 11:33:45 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/io/</guid><description>The io module can be used to write network files to a Neo4j database according to mako&amp;rsquo;s database schema. Networks can be imported as graphml files, gml files or as weighted edge lists (text files with three columns: source nodes, target nodes and the edge weights). The -fp prefix contains the shared file path, so there is no need to write the full file path, partial file paths or just filenames are sufficient if -fp is used.</description></item><item><title>mako netstats</title><link>https://ramellose.github.io/mako_docs/manual/cli/netstats/</link><pubDate>Tue, 20 Apr 2021 11:33:52 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/netstats/</guid><description>The netstats module can be used to carry out set operations on networks in the Neo4j database, leading to creation of Set nodes that contain the intersections, unions or differences across (groups of) networks. If no networks are specified, operations are carried out across all networks.
By default, intersections only include edges with identical weights; so for an edge to be detected as present in 3 networks, it needs to have the same weight across all 3 networks.</description></item><item><title>mako metastats</title><link>https://ramellose.github.io/mako_docs/manual/cli/metastats/</link><pubDate>Tue, 20 Apr 2021 11:34:02 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/metastats/</guid><description>The metastats module can carry out some basic operations on metadata. It can agglomerate networks to higher taxonomic levels (so all edges are merged to Family-level associations, for example), or it can carry out basic statistics. Specifically, it can calculate Spearman correlations between taxon abundances and quantitative metadata, and hypergeometric tests for qualitative metadata.
The edge agglomeration works by finding patterns, e.g. genus&amp;ndash;taxon&amp;ndash;edge&amp;ndash;taxon&amp;ndash;genus. If two edges have the same genus at both sides and matching weight, they can be merged together.</description></item><item><title>manta and anuran</title><link>https://ramellose.github.io/mako_docs/manual/cli/wrapper/</link><pubDate>Tue, 20 Apr 2021 11:34:08 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/cli/wrapper/</guid><description>The anuran and manta modules can run anuran and manta on networks stored in the Neo4j database.
-net One or more Network names to be supplied to anuran or manta
other flags For all other flags, please look up the documentation for anuran and manta; by default, mako copies the default parameters for these tools</description></item><item><title>API Overview</title><link>https://ramellose.github.io/mako_docs/manual/api/overview/</link><pubDate>Tue, 20 Apr 2021 11:36:28 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/overview/</guid><description>The API follows an identical structure to the CLI, which has been separated in several modules for ease of use. Importing a class or function from mako therefore can be done as follows:
from mako.scripts.utils import ParentDriver
from mako.scripts.base import BaseDriver
from mako.scripts.neo4biom import Biom2Neo
from mako.scripts.io import IoDriver
from mako.scripts.netstats import NetstatsDriver
from mako.scripts.metastats import MetastatsDriver
from mako.scripts.utils import ParentDriver
For learning more about the parameters used by a driver, type help(driver), replacing driver with the name of the driver you are interested in.</description></item><item><title>Using a driver class</title><link>https://ramellose.github.io/mako_docs/manual/api/drivers/</link><pubDate>Tue, 20 Apr 2021 11:36:34 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/manual/api/drivers/</guid><description>While mako&amp;rsquo;s functions can be called from command line, they have also been documented extensively so they can be used from a Python script. The base, neo4biom, io, netstats, metastats and utils modules each contain a class that can interact with a running Neo4j database instance. To carry out the functions as part of a script, simply instantiate an object with the necessary information to connect to the database and it will set up a Neo4j driver that can be used to run mako-specific functions or to run custom queries.</description></item></channel></rss>