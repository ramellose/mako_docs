<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mako info on</title><link>https://ramellose.github.io/mako_docs/demo/</link><description>Recent content in Mako info on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ramellose.github.io/mako_docs/demo/index.xml" rel="self" type="application/rss+xml"/><item><title>Paine's food web</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/intro/</link><pubDate>Wed, 21 Apr 2021 09:53:41 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/intro/</guid><description>Neo4j is a native graph database, meaning it can store biological data in a way that is more intuitive to people unfamiliar with SQL. In this guide, we will use Paine&amp;rsquo;s food web (Paine, 1966) to demonstrate how database schemas work and how you can use Cypher queries to access a Neo4j database. We will use the Neo4j Browser to visualize query outcomes. All code in this guide will be in pure Cypher, meaning you can run it from the browser interface.</description></item><item><title>Predator-prey interactions</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/pisaster/</link><pubDate>Wed, 21 Apr 2021 09:53:52 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/pisaster/</guid><description>Paine studied food webs of rocky shores in North America. In particular, he was interested in predator-prey interactions and carried out removal experiments to assess how species removal affected community structure. One species in particular appeared to have an outsized effect on the community - Pisaster ochraceus, a carnivorous starfish. In the subweb containing Pisaster and its food items, the numbers represent the fraction of food items in terms of number of food items and in terms of consumed calories (Figure 1).</description></item><item><title>Food web schemas</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/schemas/</link><pubDate>Wed, 21 Apr 2021 09:54:03 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/schemas/</guid><description>Neo4j does not enforce constraints, it is possible to store information in any way possible. The Neo4j introduction to graph database concepts provides some details on how this happens. To facilitate straightforward methods to access information, it can be helpful to come up with a set of rules for how data should be stored. By storing data according to a set of rules, it becomes easier to define general Cypher queries that can access the appropriate data.</description></item><item><title>Connect to Neo4j</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/connect/</link><pubDate>Wed, 21 Apr 2021 09:54:25 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/connect/</guid><description>We can use the Neo4j Docker container to run Neo4j without needing to deal with a complicated setup. For this demo, the following command can be run from a terminal to start the Docker container:
ðŸ‘‰
The Docker command below is given as ma ulti-line command for clarity, but please use the single-line command for copy-pasting.
docker run --rm -d --publish=7475:7474 --publish=7688:7687 --name=neo4j --env NEO4J_AUTH=neo4j/test neo4j:latest
docker run --rm -d --publish=7475:7474 --publish=7688:7687 --name=neo4j --env NEO4J_AUTH=neo4j/test neo4j:latest
We can navigate to the Neo4j Browser via the specified port: http://localhost:7475/browser/.</description></item><item><title>Creating the food web</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/create/</link><pubDate>Wed, 21 Apr 2021 09:54:37 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/create/</guid><description>After connecting to the Neo4j database, the textbox at the top of the Neo4j Browser can be used to type Cypher queries and interact with the database. Click the blue triangle next to the textbox to run a query. A Cypher query contains several clauses, MERGE being one of them. Each clause tells the DBMS what to do. In this case, the clauses tell the DBMS to unwind the list and match or create a node.</description></item><item><title>Querying the food web</title><link>https://ramellose.github.io/mako_docs/demo/pisaster/query/</link><pubDate>Wed, 21 Apr 2021 09:54:49 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/pisaster/query/</guid><description>To get the complete network, we can run the query below. Notice the LIMIT statement; when we have networks with thousands of nodes, it is crucial to limit the number of returned items to prevent the Neo4j Browser from crashing. In this case, the LIMIT is higher than the total number of items, so we simply get the complete network.
MATCH (n) RETURN n LIMIT 50
You should get a graph in the Neo4j Browser that contains the entire food web.</description></item><item><title>Demo data</title><link>https://ramellose.github.io/mako_docs/demo/vignette/intro/</link><pubDate>Mon, 19 Apr 2021 11:52:57 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/vignette/intro/</guid><description>In this vignette, several of mako&amp;rsquo;s functions will briefly be introduced with an example data set consisting of only 5 taxa and 20 samples. This data set is simple enough that most relevant nodes can be visualized in Neo4j Browser, making it feasible to follow along with all of mako&amp;rsquo;s operations.
The tables below give an overview of the data contained in the BIOM file.
Download the files here:
demo.biom</description></item><item><title>Set up database</title><link>https://ramellose.github.io/mako_docs/demo/vignette/access/</link><pubDate>Mon, 19 Apr 2021 11:52:52 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/vignette/access/</guid><description>ðŸ‘‰
The rest of this vignette assumes that you have a running instance of Neo4j to work with.
Please check out the instructions on how to start a Neo4j database, if you do not have one available yet. There needs to be an online database for mako to access before any of the following commands will work. The software will connect to the running database and interact with this.</description></item><item><title>Uploading BIOM file</title><link>https://ramellose.github.io/mako_docs/demo/vignette/biom/</link><pubDate>Mon, 19 Apr 2021 11:52:26 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/vignette/biom/</guid><description>From a terminal, navigate to the location where you downloaded the BIOM file. By storing the config file, we can save ourselves the hassle of typing access information each time. For -fp, fill in the file path where the downloaded BIOM file is stored.
mako neo4biom -fp local_filepath -cf -u neo4j -p test -a bolt://localhost:7688 -biom demo.biom
If you access the Neo4j Browser (http://localhost:7475/browser/) and run the following query, you should be able to access all the nodes connected to taxa:</description></item><item><title>Uploading networks</title><link>https://ramellose.github.io/mako_docs/demo/vignette/networks/</link><pubDate>Mon, 19 Apr 2021 11:49:52 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/demo/vignette/networks/</guid><description>From a terminal, navigate to the location where you downloaded the network files. Now, only the network files and the file path need to be provided.
mako io -fp local_filepath -cf -net demo_1.graphml demo_2.graphml
If you access the Neo4j Browser (http://localhost:7475/browser/) and run the following query, you should be able to access all the nodes connected to edges:
MATCH p=(n:Edge)--() RETURN p LIMIT 50
Figure 2: Edge links to taxa and networks.</description></item></channel></rss>