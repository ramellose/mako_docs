<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mako info on</title><link>https://ramellose.github.io/mako_docs/cypher/</link><description>Recent content in Mako info on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ramellose.github.io/mako_docs/cypher/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://ramellose.github.io/mako_docs/cypher/introduction/intro/</link><pubDate>Wed, 21 Apr 2021 09:55:12 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/introduction/intro/</guid><description>Neo4j databases can be accessed through Cypher queries. The range of possibilities with the Cypher query language is huge and this manual is not intended to be an exhaustive reference; rather, we will explain how data schemas help write Cypher queries, what the data schema used by mako looks like and show several queries that can be used to query a database generated by mako.
For a quick introduction on Cypher syntax, please take a look at Neo4j&amp;rsquo;s Introduction to Cypher.</description></item><item><title>A Cypher query</title><link>https://ramellose.github.io/mako_docs/cypher/basics/intro/</link><pubDate>Fri, 07 May 2021 17:39:05 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/basics/intro/</guid><description>Cypher is a query language specifically developed for property graphs. Therefore, Cypher queries represent patterns of nodes and the connections between them.
A Cypher query, like the one below, is composed of several parts. In this section, we will go through several of the most commonly used parts and explain what they do in the context of a Cypher query. Some of these will be explained in more detail in later sections.</description></item><item><title>Clauses</title><link>https://ramellose.github.io/mako_docs/cypher/basics/clauses/</link><pubDate>Fri, 07 May 2021 17:22:58 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/basics/clauses/</guid><description>In a Cypher query, clauses state what needs to happen with the pattern specified after the clause. For an exhaustive list of clauses, we refer to the Neo4j Cypher manual. Here, we will explain what a clause looks like and what the most common clauses do.
In the Cypher queries below, MATCH, RETURN and LIMIT are all clauses. While it is not mandatory to use capital letters, we usually do this for clarity so that it becomes easier to see which parts of the Cypher query are clauses.</description></item><item><title>Nodes and relationships</title><link>https://ramellose.github.io/mako_docs/cypher/basics/nodes/</link><pubDate>Fri, 07 May 2021 17:23:09 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/basics/nodes/</guid><description>Cypher queries include patterns that describe nodes and relationships. The syntax specifies whether a part of a query is a node or a relationship.
Specifically, in the query below, n and m are nodes, surrounded by (). The relationship is represented by &amp;ndash;. Values like m and n are parameters, which can be passed to later clauses.
MATCH p=(n)&amp;ndash;(m) RETURN p
To add details to the relationship, brackets [] should be added.</description></item><item><title>Standardized queries</title><link>https://ramellose.github.io/mako_docs/cypher/patterns/intro/</link><pubDate>Fri, 07 May 2021 17:40:38 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/patterns/intro/</guid><description>We can use the schema specified below to design sets of standard queries that can be reused across microbiome studies. Because we have a number of standard node labels that should only have connections with certain other node labels, we can omit information from our queries that we would otherwise need to specify.
For example, we know that a Family node is never directly connected to an Edge node, but must always pass through a Taxon node.</description></item><item><title>Simple queries</title><link>https://ramellose.github.io/mako_docs/cypher/patterns/basics/</link><pubDate>Fri, 07 May 2021 17:25:02 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/patterns/basics/</guid><description>The following simple queries are able to access microbiome data written to a Neo4j database by mako.
MATCH (:Genus {name: &amp;lsquo;g__Escherichia&amp;rsquo;})&amp;ndash;(:Taxon)&amp;ndash;(:Edge)&amp;ndash;(n:Taxon) RETURN n
This query returns all taxa that have an association with a taxon belonging to the genus Escherichia.
MATCH p=(a:Edge)&amp;ndash;(:Taxon)&amp;ndash;(b:Edge) WHERE a.name &amp;lt;&amp;gt; b.name RETURN p
This query returns all patterns containing a taxon with two unique edges.
MATCH p=(:Order {name: &amp;lsquo;o__Bacillales&amp;rsquo;})&amp;ndash;(:Taxon)&amp;ndash;(b:Edge)&amp;ndash;(:Taxon)&amp;ndash;(:Order {name: &amp;lsquo;o__Clostridiales&amp;rsquo;}) RETURN p
This query returns all pattern containing edges between taxa belonging to Bacillales and Clostridiales.</description></item><item><title>Complex queries</title><link>https://ramellose.github.io/mako_docs/cypher/patterns/taxonomy/</link><pubDate>Fri, 07 May 2021 18:41:34 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/patterns/taxonomy/</guid><description>The following more complex queries use mako&amp;rsquo;s database schema to carry out more intricate operations that require the use of WHERE and WITH statements.
MATCH (n:Family)--(a:Taxon)--(b:Edge)--(c:Network) WITH n, count(c) AS num, collect(distinct(c.name)) AS networks
WHERE num 2
RETURN n.name, networks
This query finds a pattern that links taxonomic families to network. It then collects the family names and all unique network names and filters the pattern so all results occur in at least two networks.</description></item><item><title>Schemas for associations</title><link>https://ramellose.github.io/mako_docs/cypher/schema/intro/</link><pubDate>Wed, 21 Apr 2021 16:29:54 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/schema/intro/</guid><description>Database schemas are blueprints that describe how data in a database is organized. By defining schemas, we are able to design queries that can access data stored according to those schemas. Hence, mako&amp;rsquo;s core component is a database schema constructed from several OWL terms. This database schema also defines constraints for the data and provides guidance on how data needs to be uploaded to become easily accessible.
In a nutshell, mako takes the relationships defined in the OWL file and queries the database to find relationships that do not connect to nodes described in that file.</description></item><item><title>Database schema for mako</title><link>https://ramellose.github.io/mako_docs/cypher/schema/overview/</link><pubDate>Wed, 21 Apr 2021 16:29:49 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/schema/overview/</guid><description>The database schema used by mako was designed to meet several demands:
Simple querying of BIOM data
Simple querying of network data
Respect hierarchical structure of taxonomic tree
Straightforward access of networks for meta-analyses
Flexible inclusion of metadata
As a result, each of the items always present in networks and BIOM files have their own node label and can more easily be accessed. In contrast, property nodes are more flexible and can be connected to any other node.</description></item><item><title>Default nodes and relationships</title><link>https://ramellose.github.io/mako_docs/cypher/schema/default/</link><pubDate>Wed, 21 Apr 2021 16:29:43 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/cypher/schema/default/</guid><description>Many of the nodes and relationships have properties that represent specific characteristics. The overview below contains a description of each node or relationship, its ontology term and any properties that the item has if default import functions are used.
Edge - NCIT:C75923
The Edge node is one of the most important nodes of mako and supports most of its functionality. While it is possible to connect Taxon nodes directly, the Edge node can be connected separately to Network nodes or Property nodes, so that more complicated Edge metadata is possible.</description></item></channel></rss>