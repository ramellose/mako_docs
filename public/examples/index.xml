<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mako info on</title><link>https://ramellose.github.io/mako_docs/examples/</link><description>Recent content in Mako info on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="https://ramellose.github.io/mako_docs/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro</title><link>https://ramellose.github.io/mako_docs/examples/propionate/intro/</link><pubDate>Thu, 29 Apr 2021 13:44:40 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/propionate/intro/</guid><description>The human gut microbiome is capable of fermenting carbohydrates into short-chain fatty acids, which have been linked to human health. One of those short-chain fatty acids is propionate. In their review on propionate production, Louis and Flint (2017) provide a brief overview of the bacterial species that have the metabolic capacity to contribute to propionate formation. Not all bacteria are able to degrade all substrates, or to carry out the entire pathway.</description></item><item><title>Network motifs</title><link>https://ramellose.github.io/mako_docs/examples/motifs/intro/</link><pubDate>Thu, 29 Apr 2021 13:38:53 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/motifs/intro/</guid><description>Network motifs are a type of recurring pattern or subgraph that can be found in larger networks. In transcription networks, some motifs lead to dynamics that are crucial for organism functionality (Alon, 2007). However, the motifs described by Alon are directed: they show whether gene A affects gene B, or the other way around. Consequently, not all insights from Alon&amp;rsquo;s and related work may translate to microbial association networks. Other methodological issues are also at play: edges in transcriptional networks are much more likely to reflect actual interactions compared to edges in association networks, since many are inferred from experimental work or can be verified that way.</description></item><item><title>Introduction</title><link>https://ramellose.github.io/mako_docs/examples/qiita/intro/</link><pubDate>Wed, 21 Apr 2021 16:30:54 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/qiita/intro/</guid><description>For presenting mako, we constructed a curated database of 60 data sets and 60 networks which were collected from Qiita (Gonzalez et al., 2018). We can load a dump of mako&amp;rsquo;s 60-network database into a Docker container or a local Neo4j database. The following commands carry out such a task. Keep in mind that you need to use a Neo4j version equal to the version that the database was created in, in this case 4.</description></item><item><title>Finding genera</title><link>https://ramellose.github.io/mako_docs/examples/propionate/queries/</link><pubDate>Thu, 29 Apr 2021 13:48:30 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/propionate/queries/</guid><description>To run the queries on the Neo4j database, we first need to set up a driver. This can be any driver, since all drivers have the ability to run queries.
import os
import pandas as pd
from mako.scripts.io import IoDriver
loc = os.getcwd()
driver = IoDriver(uri='neo4j://localhost:7687',
user='neo4j',
password='demo',
filepath=loc,
encrypted=False)
First, let&amp;rsquo;s specify which bacteria are able to carry out certain steps. Since the database doesn&amp;rsquo;t contain species information, only genus-level assignments, we will go with this information.</description></item><item><title>Functions</title><link>https://ramellose.github.io/mako_docs/examples/motifs/functions/</link><pubDate>Thu, 29 Apr 2021 13:43:31 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/motifs/functions/</guid><description>To process Cypher query results, we first need to be able to handle some peculiarities of query behaviour. As addressed in the Custom Queries demo, some patterns can be matched in reverse. Take for example the 3-node clique consisting of nodes A, B and C. The pattern can match this as A&amp;ndash;B&amp;ndash;C&amp;ndash;A, but also as B&amp;ndash;C&amp;ndash;A&amp;ndash;B or C&amp;ndash;A&amp;ndash;B&amp;ndash;C. All three options will be returned as results. Consequently, we first need to write a function that returns only the unique nods.</description></item><item><title>Download</title><link>https://ramellose.github.io/mako_docs/examples/qiita/download/</link><pubDate>Wed, 21 Apr 2021 16:31:02 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/qiita/download/</guid><description>First, download the mako.dump file from the mako releases page. This file was created by uploading 60 BIOM files and network files to the Neo4j database and then using neo4j-admin to create a dump file. Such a file is much faster to restore a complete database. Save the file to a folder named data, then navigate to the folder containing the data folder on your command line. See the screenshot below for an example data folder in Ubuntu.</description></item><item><title>Making an Upset plot</title><link>https://ramellose.github.io/mako_docs/examples/propionate/plot/</link><pubDate>Thu, 29 Apr 2021 13:48:00 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/propionate/plot/</guid><description>To visualize the results, we need to visualize associations between genera, and the number of times these links were found in the database. The matrix layout under the barplot allows UpsetR to effectively visualize these links.
To run UpsetR, we first need to process the data we collected previously, so that it is in a format that UpsetR can work with. Specifically, we will make a column filled with zeroes for each genus.</description></item><item><title>Queries</title><link>https://ramellose.github.io/mako_docs/examples/motifs/queries/</link><pubDate>Thu, 29 Apr 2021 13:43:56 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/motifs/queries/</guid><description>After defining the functions, we can run the complete script to get the EMPO annotations and access the queries. Specifically, we need to define three types of queries: we need to find all 3-node cliques, we need to find all 4-node cliques and we need to be able to filter these on weight. However, we&amp;rsquo;ll need to upload the EMPO_2 annotations first. We can use the add_metadata function to do this; we need to provide a tsv file to do this.</description></item><item><title>Write to database</title><link>https://ramellose.github.io/mako_docs/examples/qiita/write/</link><pubDate>Wed, 21 Apr 2021 16:31:20 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/qiita/write/</guid><description>The dump file can be written both to a local Neo4j database, and to a Docker file. The former is a bit simpler, but requires you to download the exact Neo4j version used to generate the dump file,
Writing the dump file to a local Neo4j database
If you have a running local instance of Neo4j, you can simply use the command below from the neo4j folder. Make sure to adapt the --from file path to the file path where you have saved the mako.</description></item><item><title>Code Ocean</title><link>https://ramellose.github.io/mako_docs/examples/qiita/ocean/</link><pubDate>Thu, 29 Apr 2021 13:51:57 +0200</pubDate><guid>https://ramellose.github.io/mako_docs/examples/qiita/ocean/</guid><description>The entire curated database is also availabe through Code Ocean via the mako compute capsule. Code Ocean is a platform for sharing computational research. Compute capsules include not only scientific software, but also scripts necessary to demonstrate the functionality of this software. The capsules do not need to be installed but are directly executable from the Code Ocean servers. Consequently, the cost of trying out new software is drastically reduced.</description></item></channel></rss>